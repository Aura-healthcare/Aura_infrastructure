input {

    file {
        # mode => "read" # only version >= 6.4
        path => ["{{ aura_logstash_data_container_location }}/*_RrInterval_*"]
        type => "RrInterval"
        codec => "json"
        start_position => "beginning" # no need with read mode
        # file_completed_action => "log" # action to take after file is read
        # file_completed_log_path => "/usr/share/logstash" # path to store file read by logstash
        ignore_older => 0
    }

    file {
        path => ["{{ aura_logstash_data_container_location }}/*_MotionAccelerometer_*"]
        type => "MotionAccelerometer"
        codec => "json"
        start_position => "beginning"
        ignore_older => 0
     }

    file {
        path => ["{{ aura_logstash_data_container_location }}/*_MotionGyroscope_*"]
        type => "MotionGyroscope"
        codec => "json"
        start_position => "beginning"
        ignore_older => 0
     }
}

filter{

    if [type] == "RrInterval" {

        json {
            source => "message"
            #skip_on_invalid_json => true
        }

        split { field => "data"}

        mutate {
            split => {"data" => " "}
            add_field => {"time_bis" => "%{data[0]}"}
            add_field => {"value" => "%{data[1]}"}
        }

        date {
            timezone => "UTC"
            match => ["time_bis", "ISO8601"]
            target => "@timestamp"
        }

    }

    if [type] == "MotionAccelerometer" {

        json {
            source => "message"
        }

        split { field => "data"}

        mutate {
            split => {"data" => " "}
            add_field => {"time_bis" => "%{data[0]}"}
            add_field => {"x_axis_acm" => "%{data[1]}"}
            add_field => {"y_axis_acl" => "%{data[2]}"}
            add_field => {"z_axis_acm" => "%{data[3]}"}
            add_field => {"sensibility_acm" => "%{data[4]}"}
        }

        date {
            timezone => "UTC"
            match => ["time_bis", "ISO8601"]
            target => "@timestamp"
        }

    }

    if [type] == "MotionGyroscope" {

        json {
            source => "message"
        }

        split { field => "data"}

        mutate {
            split => {"data" => " "}
            add_field => {"time_bis" => "%{data[0]}"}
            add_field => {"x_axis_gyro" => "%{data[1]}"}
            add_field => {"y_axis_gyro" => "%{data[2]}"}
            add_field => {"z_axis_gyro" => "%{data[3]}"}
        }

        date {
            timezone => "UTC"
            match => ["time_bis", "ISO8601"]
            target => "@timestamp"
        }

    }

}

output {

    #stdout {}

    if [type] == "RrInterval" {

        influxdb {

        id => "RrInterval"

      	# allow_time_override => true
      	send_as_tags => ["user","device_address"]

        host => "{{ aura_time_series_db_container }}"

      	db => "{{ aura_physio_data_db_name }}"

      	measurement => "heart"

      	codec => json

      	use_event_fields_for_data_points => true

      	exclude_fields => ["time_bis", "message", "data", "@timestamp","@version", "type", "path", "host"]
        }

    }

   if [type] == "MotionAccelerometer" {

       influxdb {
            id => "MotionAccelerometer"

            send_as_tags => ["user","device_address"]

            host => "{{ aura_time_series_db_container }}"

            db => "{{ aura_physio_data_db_name }}"

            measurement => "accelerometer"

            codec => json

            use_event_fields_for_data_points => true

            exclude_fields => ["time_bis", "message", "data", "@timestamp","@version", "type", "path", "host"]
       	}

     }

   if [type] == "MotionGyroscope" {

       influxdb {

            id => "MotionGyroscope"

       	    send_as_tags => ["user","device_address"]

            host => "{{ aura_time_series_db_container }}"

           	db => "{{ aura_physio_data_db_name }}"

           	measurement => "gyroscope"

          	codec => json

           	use_event_fields_for_data_points => true

           	exclude_fields => ["time_bis", "message", "data", "@timestamp","@version", "type", "path", "host"]
       	}

     }

}
